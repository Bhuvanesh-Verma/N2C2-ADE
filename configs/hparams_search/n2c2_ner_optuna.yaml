# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=conll2003_optuna experiment=conll2003

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "metric/span/macro/f1/val"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 20

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define range of hyperparameters
    # More information here : https://hydra.cc/docs/plugins/optuna_sweeper/#search-space-configuration
    params:
      datamodule.batch_size: choice(4,16,32)
      model.learning_rate: interval(0.000001, 0.001)
      model.classifier_dropout: interval(0.3, 0.8)
      model.seq2seq_encoder.type: choice('lstm', 'gru')
      model.seq2seq_encoder.bidirectional: choice(True, False)
      model.seq2seq_encoder.num_layers: choice(1,2,4,8)
      model.seq2seq_encoder.hidden_size: choice(32, 64, 216, 512)
      trainer.max_epochs: choice(10, 15, 20, 25)

